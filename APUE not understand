
W.Richard Stevens 先生所著之书比较适合有经验的人进一步深入学习

W.Richard Stevens 先生所著的UNIX 环境高级编程、UNIX网络编程、TCP/IP详解是难得的入门好书，但这里的入门指得是研究生级别的入门。
Stevens 先生所著之书多半是为了给研究生上课时用做教材，因此 Stevens 先生假设阅读这些书的人至少已经接受过了系统的计算机技术本科教育，
已经拥有了比较系统的计算机相关基础理论知识。在书中 Stevens 先生假设读者拥有了最基础的操作系统理论，网络技术理论，以及UNIX理论和实践经验，
并拥有数种业界常用的UNIX系统作为学习环境（在国外的大学里很容易获得），这样才能体会书中所述的细节。因此这些书刚接触时看似通俗易懂，
但在阅读细节上却对读者要求甚高，如果没有足够的专业理论和系统实践是很难真正读进去的。

所以，对于没有接受过系统的计算机专业教育的爱好者，或者主要以 linux 系统维护，或以linux 桌面应用为主的普通用户，Stevens 先生的书
并不是很合适的阅读对象。

因此，就我个人的看法，掌握任何一种知识都是需要投入的。我们需要花费金钱去得知识来源（花钱买书，花钱上网，花钱培训），
需要花费宝贵的时间去阅读（人生匆匆几十年，没多少时间可以给我们去浪费），需要花费精力去理解书中的内容
（基础知识越扎实，理解所学内容越快，但累积基础同样需要大量时间和精力），需要找到合适的环境（光看不实践心里是不会有底的）
去验证自己掌握的东西。因此，如果在决定投入之前，先要摸清楚自己到底想要达到什么样的目标，这个目标是否切合自己的实际
（相信一个在流水线上辛苦劳作的普通工人，即使学会了计算机编程也是没有用武之地的，除非他有机会离开流水线）。
自己是否有足够的资源承载自己的理想（如对于温饱问题尚未解决之人，要他花上千上万的钱去学MBA显然是不现实的）。

同时，任何一本书都会对读者提出一个基本的知识架构和程度上的要求，比方说即使是文学博士，让他去读高能物理学方面的书也会要他的命的。
因此在选择所读之书前，先要对自己的实际能力做一次详细的评估，看自己目前到了哪种阶段，是否有能力去掌握自己想要掌握的东西。
千万不要因为好高骛远而勉力为之。选择适合自己当前水平的书去阅读并理解，远好过拿着大师所著的神作干瞪眼。

如果LZ确实象帖中所描述的，主要希望掌握UNIX下的编程技术，尤其是网络编程技术的话。那以我本人的经验，可以有两条路走：

1、以实际需要完善知识架构：为自己做一个项目，比方说自己写个简单的 Web 服务器，因为现在 Web 应用非常丰富，
既有成熟的客户端如浏览器可以配合，又有足够全的文档如 RFC文档可供参考，再加上最基本的 socket 编程经验，
就可以开始做自己的 Web 服务器。一步一步的为 Web 服务器添加流行的功能，如支持后台 FastCGI 接口，
支持 WebDAV，支持流媒体等。在这个过程中不断地学习和掌握相关的理论知识，有时在发觉设计上的不足时甚至需要推翻全盘重新架构。
当最终一个完全符合自己心意且足够实用的 Web 服务器做成时，就拥有了可以由自己支配和修改的服务器，同时也掌握了相关的专业理论。
这种方式比较适合有一定专业基础的人使用。优点是直观，方向明确所以学习效率高。缺点是需求驱动，形成知识架构不容易完整。

2、系统掌握计算机专业理论：最好的书就是大学里的理论教科书，这些书不会去讲解过于具体的计算机应用，而是从概念开始讲起，
力图使学习者获得一个完整的知识体系。只要以后碰到的工作和这个知识体系相关，自然就能很快学会。这种方式比较适合没有基础，
或者希望深入学习的人使用，优点是知识架构会逐渐趋于完整，理论功底扎实，后劲足。缺点是花费时间长，方向不明确所以学习效率低，
初期会因缺少实践而进展缓慢。

因为不很清楚LZ目前的计算机专业技术水平到了哪种程度，也不清楚LZ最终希望自己达到什么样的目标，所以也很难为LZ提供什么有价值的经验。
如果LZ能详细描述一下自己目前的实际水平，以及希望达到什么样的目标，我也许可以为LZ提供一些建议。


